#pragma once

#include <lgr_vector3.hpp>
#include <lgr_vector4.hpp>
#include <lgr_matrix3x3.hpp>
#include <lgr_matrix4x4.hpp>
#include <lgr_array.hpp>

namespace lgr {

namespace composite_tetrahedron {

using S_t = array<array<vector3<double>, 10>, 12>;
using gamma_t = array<array<array<double, 10>, 10>, 12>;
using subtet_proj_t = array<matrix4x4<double>, 12>;
using subtet_int_t = array<array<double, 12>, 4>;
using O_t = array<matrix3x3<double>, 12>;
using SOL_t = array<array<vector3<double>, 10>, 4>;

inline S_t get_S() noexcept {
  S_t S;
  for (auto& a : S) {
    for (auto& b : a) {
      b = vector3<double>::zero();
    }
  }
  S[0][0](0) = -2;
  S[0][0](1) = -2;
  S[0][0](2) = -2;
  S[0][4](0) = 2;
  S[0][6](1) = 2;
  S[0][7](2) = 2;
  S[1][1](0) = 2;
  S[1][4](0) = -2;
  S[1][4](1) = -2;
  S[1][4](2) = -2;
  S[1][5](1) = 2;
  S[1][8](2) = 2;
  S[2][2](1) = 2;
  S[2][5](0) = 2;
  S[2][6](0) = -2;
  S[2][6](1) = -2;
  S[2][6](2) = -2;
  S[2][9](2) = 2;
  S[3][3](2) = 2;
  S[3][7](0) = -2;
  S[3][7](1) = -2;
  S[3][7](2) = -2;
  S[3][8](0) = 2;
  S[3][9](1) = 2;
  S[4][4](0) = -0.6666666666666666;
  S[4][4](1) = -2;
  S[4][4](2) = -2;
  S[4][5](0) = 1.3333333333333333;
  S[4][5](1) = 2;
  S[4][6](0) = -0.6666666666666666;
  S[4][7](0) = -0.6666666666666666;
  S[4][8](0) = 1.3333333333333333;
  S[4][8](2) = 2;
  S[4][9](0) = -0.6666666666666666;
  S[5][4](0) = -0.6666666666666666;
  S[5][4](1) = -0.6666666666666666;
  S[5][4](2) = -0.6666666666666666;
  S[5][5](0) = 1.3333333333333333;
  S[5][5](1) = 1.3333333333333333;
  S[5][5](2) = -0.6666666666666666;
  S[5][6](0) = -0.6666666666666666;
  S[5][6](1) = -0.6666666666666666;
  S[5][6](2) = -0.6666666666666666;
  S[5][7](0) = -0.6666666666666666;
  S[5][7](1) = -0.6666666666666666;
  S[5][7](2) = -0.6666666666666666;
  S[5][8](0) = 1.3333333333333333;
  S[5][8](1) = -0.6666666666666666;
  S[5][8](2) = 1.3333333333333333;
  S[5][9](0) = -0.6666666666666666;
  S[5][9](1) = 1.3333333333333333;
  S[5][9](2) = 1.3333333333333333;
  S[6][4](2) = -0.6666666666666666;
  S[6][5](2) = -0.6666666666666666;
  S[6][6](2) = -0.6666666666666666;
  S[6][7](0) = -2;
  S[6][7](1) = -2;
  S[6][7](2) = -0.6666666666666666;
  S[6][8](0) = 2;
  S[6][8](2) = 1.3333333333333333;
  S[6][9](1) = 2;
  S[6][9](2) = 1.3333333333333333;
  S[7][4](1) = -1.3333333333333333;
  S[7][4](2) = -2;
  S[7][5](1) = 0.6666666666666666;
  S[7][6](1) = 0.6666666666666666;
  S[7][7](0) = -2;
  S[7][7](1) = -1.3333333333333333;
  S[7][8](0) = 2;
  S[7][8](1) = 0.6666666666666666;
  S[7][8](2) = 2;
  S[7][9](1) = 0.6666666666666666;
  S[8][4](1) = -2;
  S[8][4](2) = -1.3333333333333333;
  S[8][5](0) = 2;
  S[8][5](1) = 2;
  S[8][5](2) = 0.6666666666666666;
  S[8][6](0) = -2;
  S[8][6](2) = -1.3333333333333333;
  S[8][7](2) = 0.6666666666666666;
  S[8][8](2) = 0.6666666666666666;
  S[8][9](2) = 0.6666666666666666;
  S[9][4](1) = -0.6666666666666666;
  S[9][5](0) = 2;
  S[9][5](1) = 1.3333333333333333;
  S[9][6](0) = -2;
  S[9][6](1) = -0.6666666666666666;
  S[9][6](2) = -2;
  S[9][7](1) = -0.6666666666666666;
  S[9][8](1) = -0.6666666666666666;
  S[9][9](1) = 1.3333333333333333;
  S[9][9](2) = 2;
  S[10][4](0) = 0.6666666666666666;
  S[10][5](0) = 0.6666666666666666;
  S[10][6](0) = -1.3333333333333333;
  S[10][6](2) = -2;
  S[10][7](0) = -1.3333333333333333;
  S[10][7](1) = -2;
  S[10][8](0) = 0.6666666666666666;
  S[10][9](0) = 0.6666666666666666;
  S[10][9](1) = 2;
  S[10][9](2) = 2;
  S[11][4](0) = 0.6666666666666666;
  S[11][4](1) = -1.3333333333333333;
  S[11][4](2) = -1.3333333333333333;
  S[11][5](0) = 0.6666666666666666;
  S[11][5](1) = 0.6666666666666666;
  S[11][5](2) = 0.6666666666666666;
  S[11][6](0) = -1.3333333333333333;
  S[11][6](1) = 0.6666666666666666;
  S[11][6](2) = -1.3333333333333333;
  S[11][7](0) = -1.3333333333333333;
  S[11][7](1) = -1.3333333333333333;
  S[11][7](2) = 0.6666666666666666;
  S[11][8](0) = 0.6666666666666666;
  S[11][8](1) = 0.6666666666666666;
  S[11][8](2) = 0.6666666666666666;
  S[11][9](0) = 0.6666666666666666;
  S[11][9](1) = 0.6666666666666666;
  S[11][9](2) = 0.6666666666666666;
  return S;
}

inline gamma_t get_gamma() noexcept {
  gamma_t gamma;
  for (auto& a : S) {
    for (auto& b : a) {
      for (auto& c : b) {
        c = 0.0;
      }
    }
  }
  gamma[0][0][0] = 0.0020833333333333333;
  gamma[0][0][4] = 0.0010416666666666667;
  gamma[0][0][6] = 0.0010416666666666667;
  gamma[0][0][7] = 0.0010416666666666667;
  gamma[0][4][0] = 0.0010416666666666667;
  gamma[0][4][4] = 0.0020833333333333333;
  gamma[0][4][6] = 0.0010416666666666667;
  gamma[0][4][7] = 0.0010416666666666667;
  gamma[0][6][0] = 0.0010416666666666667;
  gamma[0][6][4] = 0.0010416666666666667;
  gamma[0][6][6] = 0.0020833333333333333;
  gamma[0][6][7] = 0.0010416666666666667;
  gamma[0][7][0] = 0.0010416666666666667;
  gamma[0][7][4] = 0.0010416666666666667;
  gamma[0][7][6] = 0.0010416666666666667;
  gamma[0][7][7] = 0.0020833333333333333;
  gamma[1][1][1] = 0.0020833333333333333;
  gamma[1][1][4] = 0.0010416666666666667;
  gamma[1][1][5] = 0.0010416666666666667;
  gamma[1][1][8] = 0.0010416666666666667;
  gamma[1][4][1] = 0.0010416666666666667;
  gamma[1][4][4] = 0.0020833333333333333;
  gamma[1][4][5] = 0.0010416666666666667;
  gamma[1][4][8] = 0.0010416666666666667;
  gamma[1][5][1] = 0.0010416666666666667;
  gamma[1][5][4] = 0.0010416666666666667;
  gamma[1][5][5] = 0.0020833333333333333;
  gamma[1][5][8] = 0.0010416666666666667;
  gamma[1][8][1] = 0.0010416666666666667;
  gamma[1][8][4] = 0.0010416666666666667;
  gamma[1][8][5] = 0.0010416666666666667;
  gamma[1][8][8] = 0.0020833333333333333;
  gamma[2][2][2] = 0.0020833333333333333;
  gamma[2][2][5] = 0.0010416666666666667;
  gamma[2][2][6] = 0.0010416666666666667;
  gamma[2][2][9] = 0.0010416666666666667;
  gamma[2][5][2] = 0.0010416666666666667;
  gamma[2][5][5] = 0.0020833333333333333;
  gamma[2][5][6] = 0.0010416666666666667;
  gamma[2][5][9] = 0.0010416666666666667;
  gamma[2][6][2] = 0.0010416666666666667;
  gamma[2][6][5] = 0.0010416666666666667;
  gamma[2][6][6] = 0.0020833333333333333;
  gamma[2][6][9] = 0.0010416666666666667;
  gamma[2][9][2] = 0.0010416666666666667;
  gamma[2][9][5] = 0.0010416666666666667;
  gamma[2][9][6] = 0.0010416666666666667;
  gamma[2][9][9] = 0.0020833333333333333;
  gamma[3][3][3] = 0.0020833333333333333;
  gamma[3][3][7] = 0.0010416666666666667;
  gamma[3][3][8] = 0.0010416666666666667;
  gamma[3][3][9] = 0.0010416666666666667;
  gamma[3][7][3] = 0.0010416666666666667;
  gamma[3][7][7] = 0.0020833333333333333;
  gamma[3][7][8] = 0.0010416666666666667;
  gamma[3][7][9] = 0.0010416666666666667;
  gamma[3][8][3] = 0.0010416666666666667;
  gamma[3][8][7] = 0.0010416666666666667;
  gamma[3][8][8] = 0.0020833333333333333;
  gamma[3][8][9] = 0.0010416666666666667;
  gamma[3][9][3] = 0.0010416666666666667;
  gamma[3][9][7] = 0.0010416666666666667;
  gamma[3][9][8] = 0.0010416666666666667;
  gamma[3][9][9] = 0.0020833333333333333;
  gamma[4][4][4] = 0.001244212962962963;
  gamma[4][4][5] = 0.0007233796296296296;
  gamma[4][4][6] = 0.00011574074074074075;
  gamma[4][4][7] = 0.00011574074074074075;
  gamma[4][4][8] = 0.0007233796296296296;
  gamma[4][4][9] = 0.00011574074074074075;
  gamma[4][5][4] = 0.0007233796296296296;
  gamma[4][5][5] = 0.001244212962962963;
  gamma[4][5][6] = 0.00011574074074074075;
  gamma[4][5][7] = 0.00011574074074074075;
  gamma[4][5][8] = 0.0007233796296296296;
  gamma[4][5][9] = 0.00011574074074074075;
  gamma[4][6][4] = 0.00011574074074074075;
  gamma[4][6][5] = 0.00011574074074074075;
  gamma[4][6][6] = 0.000028935185185185186;
  gamma[4][6][7] = 0.000028935185185185186;
  gamma[4][6][8] = 0.00011574074074074075;
  gamma[4][6][9] = 0.000028935185185185186;
  gamma[4][7][4] = 0.00011574074074074075;
  gamma[4][7][5] = 0.00011574074074074075;
  gamma[4][7][6] = 0.000028935185185185186;
  gamma[4][7][7] = 0.000028935185185185186;
  gamma[4][7][8] = 0.00011574074074074075;
  gamma[4][7][9] = 0.000028935185185185186;
  gamma[4][8][4] = 0.0007233796296296296;
  gamma[4][8][5] = 0.0007233796296296296;
  gamma[4][8][6] = 0.00011574074074074075;
  gamma[4][8][7] = 0.00011574074074074075;
  gamma[4][8][8] = 0.001244212962962963;
  gamma[4][8][9] = 0.00011574074074074075;
  gamma[4][9][4] = 0.00011574074074074075;
  gamma[4][9][5] = 0.00011574074074074075;
  gamma[4][9][6] = 0.000028935185185185186;
  gamma[4][9][7] = 0.000028935185185185186;
  gamma[4][9][8] = 0.00011574074074074075;
  gamma[4][9][9] = 0.000028935185185185186;
  gamma[5][4][4] = 0.000028935185185185186;
  gamma[5][4][5] = 0.00011574074074074075;
  gamma[5][4][6] = 0.000028935185185185186;
  gamma[5][4][7] = 0.000028935185185185186;
  gamma[5][4][8] = 0.00011574074074074075;
  gamma[5][4][9] = 0.00011574074074074075;
  gamma[5][5][4] = 0.00011574074074074075;
  gamma[5][5][5] = 0.001244212962962963;
  gamma[5][5][6] = 0.00011574074074074075;
  gamma[5][5][7] = 0.00011574074074074075;
  gamma[5][5][8] = 0.0007233796296296296;
  gamma[5][5][9] = 0.0007233796296296296;
  gamma[5][6][4] = 0.000028935185185185186;
  gamma[5][6][5] = 0.00011574074074074075;
  gamma[5][6][6] = 0.000028935185185185186;
  gamma[5][6][7] = 0.000028935185185185186;
  gamma[5][6][8] = 0.00011574074074074075;
  gamma[5][6][9] = 0.00011574074074074075;
  gamma[5][7][4] = 0.000028935185185185186;
  gamma[5][7][5] = 0.00011574074074074075;
  gamma[5][7][6] = 0.000028935185185185186;
  gamma[5][7][7] = 0.000028935185185185186;
  gamma[5][7][8] = 0.00011574074074074075;
  gamma[5][7][9] = 0.00011574074074074075;
  gamma[5][8][4] = 0.00011574074074074075;
  gamma[5][8][5] = 0.0007233796296296296;
  gamma[5][8][6] = 0.00011574074074074075;
  gamma[5][8][7] = 0.00011574074074074075;
  gamma[5][8][8] = 0.001244212962962963;
  gamma[5][8][9] = 0.0007233796296296296;
  gamma[5][9][4] = 0.00011574074074074075;
  gamma[5][9][5] = 0.0007233796296296296;
  gamma[5][9][6] = 0.00011574074074074075;
  gamma[5][9][7] = 0.00011574074074074075;
  gamma[5][9][8] = 0.0007233796296296296;
  gamma[5][9][9] = 0.001244212962962963;
  gamma[6][4][4] = 0.000028935185185185186;
  gamma[6][4][5] = 0.000028935185185185186;
  gamma[6][4][6] = 0.000028935185185185186;
  gamma[6][4][7] = 0.00011574074074074075;
  gamma[6][4][8] = 0.00011574074074074075;
  gamma[6][4][9] = 0.00011574074074074075;
  gamma[6][5][4] = 0.000028935185185185186;
  gamma[6][5][5] = 0.000028935185185185186;
  gamma[6][5][6] = 0.000028935185185185186;
  gamma[6][5][7] = 0.00011574074074074075;
  gamma[6][5][8] = 0.00011574074074074075;
  gamma[6][5][9] = 0.00011574074074074075;
  gamma[6][6][4] = 0.000028935185185185186;
  gamma[6][6][5] = 0.000028935185185185186;
  gamma[6][6][6] = 0.000028935185185185186;
  gamma[6][6][7] = 0.00011574074074074075;
  gamma[6][6][8] = 0.00011574074074074075;
  gamma[6][6][9] = 0.00011574074074074075;
  gamma[6][7][4] = 0.00011574074074074075;
  gamma[6][7][5] = 0.00011574074074074075;
  gamma[6][7][6] = 0.00011574074074074075;
  gamma[6][7][7] = 0.001244212962962963;
  gamma[6][7][8] = 0.0007233796296296296;
  gamma[6][7][9] = 0.0007233796296296296;
  gamma[6][8][4] = 0.00011574074074074075;
  gamma[6][8][5] = 0.00011574074074074075;
  gamma[6][8][6] = 0.00011574074074074075;
  gamma[6][8][7] = 0.0007233796296296296;
  gamma[6][8][8] = 0.001244212962962963;
  gamma[6][8][9] = 0.0007233796296296296;
  gamma[6][9][4] = 0.00011574074074074075;
  gamma[6][9][5] = 0.00011574074074074075;
  gamma[6][9][6] = 0.00011574074074074075;
  gamma[6][9][7] = 0.0007233796296296296;
  gamma[6][9][8] = 0.0007233796296296296;
  gamma[6][9][9] = 0.001244212962962963;
  gamma[7][4][4] = 0.001244212962962963;
  gamma[7][4][5] = 0.00011574074074074075;
  gamma[7][4][6] = 0.00011574074074074075;
  gamma[7][4][7] = 0.0007233796296296296;
  gamma[7][4][8] = 0.0007233796296296296;
  gamma[7][4][9] = 0.00011574074074074075;
  gamma[7][5][4] = 0.00011574074074074075;
  gamma[7][5][5] = 0.000028935185185185186;
  gamma[7][5][6] = 0.000028935185185185186;
  gamma[7][5][7] = 0.00011574074074074075;
  gamma[7][5][8] = 0.00011574074074074075;
  gamma[7][5][9] = 0.000028935185185185186;
  gamma[7][6][4] = 0.00011574074074074075;
  gamma[7][6][5] = 0.000028935185185185186;
  gamma[7][6][6] = 0.000028935185185185186;
  gamma[7][6][7] = 0.00011574074074074075;
  gamma[7][6][8] = 0.00011574074074074075;
  gamma[7][6][9] = 0.000028935185185185186;
  gamma[7][7][4] = 0.0007233796296296296;
  gamma[7][7][5] = 0.00011574074074074075;
  gamma[7][7][6] = 0.00011574074074074075;
  gamma[7][7][7] = 0.001244212962962963;
  gamma[7][7][8] = 0.0007233796296296296;
  gamma[7][7][9] = 0.00011574074074074075;
  gamma[7][8][4] = 0.0007233796296296296;
  gamma[7][8][5] = 0.00011574074074074075;
  gamma[7][8][6] = 0.00011574074074074075;
  gamma[7][8][7] = 0.0007233796296296296;
  gamma[7][8][8] = 0.001244212962962963;
  gamma[7][8][9] = 0.00011574074074074075;
  gamma[7][9][4] = 0.00011574074074074075;
  gamma[7][9][5] = 0.000028935185185185186;
  gamma[7][9][6] = 0.000028935185185185186;
  gamma[7][9][7] = 0.00011574074074074075;
  gamma[7][9][8] = 0.00011574074074074075;
  gamma[7][9][9] = 0.000028935185185185186;
  gamma[8][4][4] = 0.001244212962962963;
  gamma[8][4][5] = 0.0007233796296296296;
  gamma[8][4][6] = 0.0007233796296296296;
  gamma[8][4][7] = 0.00011574074074074075;
  gamma[8][4][8] = 0.00011574074074074075;
  gamma[8][4][9] = 0.00011574074074074075;
  gamma[8][5][4] = 0.0007233796296296296;
  gamma[8][5][5] = 0.001244212962962963;
  gamma[8][5][6] = 0.0007233796296296296;
  gamma[8][5][7] = 0.00011574074074074075;
  gamma[8][5][8] = 0.00011574074074074075;
  gamma[8][5][9] = 0.00011574074074074075;
  gamma[8][6][4] = 0.0007233796296296296;
  gamma[8][6][5] = 0.0007233796296296296;
  gamma[8][6][6] = 0.001244212962962963;
  gamma[8][6][7] = 0.00011574074074074075;
  gamma[8][6][8] = 0.00011574074074074075;
  gamma[8][6][9] = 0.00011574074074074075;
  gamma[8][7][4] = 0.00011574074074074075;
  gamma[8][7][5] = 0.00011574074074074075;
  gamma[8][7][6] = 0.00011574074074074075;
  gamma[8][7][7] = 0.000028935185185185186;
  gamma[8][7][8] = 0.000028935185185185186;
  gamma[8][7][9] = 0.000028935185185185186;
  gamma[8][8][4] = 0.00011574074074074075;
  gamma[8][8][5] = 0.00011574074074074075;
  gamma[8][8][6] = 0.00011574074074074075;
  gamma[8][8][7] = 0.000028935185185185186;
  gamma[8][8][8] = 0.000028935185185185186;
  gamma[8][8][9] = 0.000028935185185185186;
  gamma[8][9][4] = 0.00011574074074074075;
  gamma[8][9][5] = 0.00011574074074074075;
  gamma[8][9][6] = 0.00011574074074074075;
  gamma[8][9][7] = 0.000028935185185185186;
  gamma[8][9][8] = 0.000028935185185185186;
  gamma[8][9][9] = 0.000028935185185185186;
  gamma[9][4][4] = 0.000028935185185185186;
  gamma[9][4][5] = 0.00011574074074074075;
  gamma[9][4][6] = 0.00011574074074074075;
  gamma[9][4][7] = 0.000028935185185185186;
  gamma[9][4][8] = 0.000028935185185185186;
  gamma[9][4][9] = 0.00011574074074074075;
  gamma[9][5][4] = 0.00011574074074074075;
  gamma[9][5][5] = 0.001244212962962963;
  gamma[9][5][6] = 0.0007233796296296296;
  gamma[9][5][7] = 0.00011574074074074075;
  gamma[9][5][8] = 0.00011574074074074075;
  gamma[9][5][9] = 0.0007233796296296296;
  gamma[9][6][4] = 0.00011574074074074075;
  gamma[9][6][5] = 0.0007233796296296296;
  gamma[9][6][6] = 0.001244212962962963;
  gamma[9][6][7] = 0.00011574074074074075;
  gamma[9][6][8] = 0.00011574074074074075;
  gamma[9][6][9] = 0.0007233796296296296;
  gamma[9][7][4] = 0.000028935185185185186;
  gamma[9][7][5] = 0.00011574074074074075;
  gamma[9][7][6] = 0.00011574074074074075;
  gamma[9][7][7] = 0.000028935185185185186;
  gamma[9][7][8] = 0.000028935185185185186;
  gamma[9][7][9] = 0.00011574074074074075;
  gamma[9][8][4] = 0.000028935185185185186;
  gamma[9][8][5] = 0.00011574074074074075;
  gamma[9][8][6] = 0.00011574074074074075;
  gamma[9][8][7] = 0.000028935185185185186;
  gamma[9][8][8] = 0.000028935185185185186;
  gamma[9][8][9] = 0.00011574074074074075;
  gamma[9][9][4] = 0.00011574074074074075;
  gamma[9][9][5] = 0.0007233796296296296;
  gamma[9][9][6] = 0.0007233796296296296;
  gamma[9][9][7] = 0.00011574074074074075;
  gamma[9][9][8] = 0.00011574074074074075;
  gamma[9][9][9] = 0.001244212962962963;
  gamma[10][4][4] = 0.000028935185185185186;
  gamma[10][4][5] = 0.000028935185185185186;
  gamma[10][4][6] = 0.00011574074074074075;
  gamma[10][4][7] = 0.00011574074074074075;
  gamma[10][4][8] = 0.000028935185185185186;
  gamma[10][4][9] = 0.00011574074074074075;
  gamma[10][5][4] = 0.000028935185185185186;
  gamma[10][5][5] = 0.000028935185185185186;
  gamma[10][5][6] = 0.00011574074074074075;
  gamma[10][5][7] = 0.00011574074074074075;
  gamma[10][5][8] = 0.000028935185185185186;
  gamma[10][5][9] = 0.00011574074074074075;
  gamma[10][6][4] = 0.00011574074074074075;
  gamma[10][6][5] = 0.00011574074074074075;
  gamma[10][6][6] = 0.001244212962962963;
  gamma[10][6][7] = 0.0007233796296296296;
  gamma[10][6][8] = 0.00011574074074074075;
  gamma[10][6][9] = 0.0007233796296296296;
  gamma[10][7][4] = 0.00011574074074074075;
  gamma[10][7][5] = 0.00011574074074074075;
  gamma[10][7][6] = 0.0007233796296296296;
  gamma[10][7][7] = 0.001244212962962963;
  gamma[10][7][8] = 0.00011574074074074075;
  gamma[10][7][9] = 0.0007233796296296296;
  gamma[10][8][4] = 0.000028935185185185186;
  gamma[10][8][5] = 0.000028935185185185186;
  gamma[10][8][6] = 0.00011574074074074075;
  gamma[10][8][7] = 0.00011574074074074075;
  gamma[10][8][8] = 0.000028935185185185186;
  gamma[10][8][9] = 0.00011574074074074075;
  gamma[10][9][4] = 0.00011574074074074075;
  gamma[10][9][5] = 0.00011574074074074075;
  gamma[10][9][6] = 0.0007233796296296296;
  gamma[10][9][7] = 0.0007233796296296296;
  gamma[10][9][8] = 0.00011574074074074075;
  gamma[10][9][9] = 0.001244212962962963;
  gamma[11][4][4] = 0.001244212962962963;
  gamma[11][4][5] = 0.00011574074074074075;
  gamma[11][4][6] = 0.0007233796296296296;
  gamma[11][4][7] = 0.0007233796296296296;
  gamma[11][4][8] = 0.00011574074074074075;
  gamma[11][4][9] = 0.00011574074074074075;
  gamma[11][5][4] = 0.00011574074074074075;
  gamma[11][5][5] = 0.000028935185185185186;
  gamma[11][5][6] = 0.00011574074074074075;
  gamma[11][5][7] = 0.00011574074074074075;
  gamma[11][5][8] = 0.000028935185185185186;
  gamma[11][5][9] = 0.000028935185185185186;
  gamma[11][6][4] = 0.0007233796296296296;
  gamma[11][6][5] = 0.00011574074074074075;
  gamma[11][6][6] = 0.001244212962962963;
  gamma[11][6][7] = 0.0007233796296296296;
  gamma[11][6][8] = 0.00011574074074074075;
  gamma[11][6][9] = 0.00011574074074074075;
  gamma[11][7][4] = 0.0007233796296296296;
  gamma[11][7][5] = 0.00011574074074074075;
  gamma[11][7][6] = 0.0007233796296296296;
  gamma[11][7][7] = 0.001244212962962963;
  gamma[11][7][8] = 0.00011574074074074075;
  gamma[11][7][9] = 0.00011574074074074075;
  gamma[11][8][4] = 0.00011574074074074075;
  gamma[11][8][5] = 0.000028935185185185186;
  gamma[11][8][6] = 0.00011574074074074075;
  gamma[11][8][7] = 0.00011574074074074075;
  gamma[11][8][8] = 0.000028935185185185186;
  gamma[11][8][9] = 0.000028935185185185186;
  gamma[11][9][4] = 0.00011574074074074075;
  gamma[11][9][5] = 0.000028935185185185186;
  gamma[11][9][6] = 0.00011574074074074075;
  gamma[11][9][7] = 0.00011574074074074075;
  gamma[11][9][8] = 0.000028935185185185186;
  gamma[11][9][9] = 0.000028935185185185186;
  return gamma;
}

inline subtet_proj_t get_subtet_proj_M() noexcept {
  subtet_proj_t sub_tet_int_proj_M;
  sub_tet_int_proj_M[0](0, 0) = 0.008333333333333333;
  sub_tet_int_proj_M[0](0, 1) = 0.0015625;
  sub_tet_int_proj_M[0](0, 2) = 0.0015625;
  sub_tet_int_proj_M[0](0, 3) = 0.0015625;
  sub_tet_int_proj_M[0](1, 0) = 0.0015625;
  sub_tet_int_proj_M[0](1, 1) = 0.0005208333333333333;
  sub_tet_int_proj_M[0](1, 2) = 0.00026041666666666666;
  sub_tet_int_proj_M[0](1, 3) = 0.00026041666666666666;
  sub_tet_int_proj_M[0](2, 0) = 0.0015625;
  sub_tet_int_proj_M[0](2, 1) = 0.00026041666666666666;
  sub_tet_int_proj_M[0](2, 2) = 0.0005208333333333333;
  sub_tet_int_proj_M[0](2, 3) = 0.00026041666666666666;
  sub_tet_int_proj_M[0](3, 0) = 0.0015625;
  sub_tet_int_proj_M[0](3, 1) = 0.00026041666666666666;
  sub_tet_int_proj_M[0](3, 2) = 0.00026041666666666666;
  sub_tet_int_proj_M[0](3, 3) = 0.0005208333333333333;
  sub_tet_int_proj_M[1](0, 0) = 0.0005208333333333333;
  sub_tet_int_proj_M[1](0, 1) = 0.0015625;
  sub_tet_int_proj_M[1](0, 2) = 0.00026041666666666666;
  sub_tet_int_proj_M[1](0, 3) = 0.00026041666666666666;
  sub_tet_int_proj_M[1](1, 0) = 0.0015625;
  sub_tet_int_proj_M[1](1, 1) = 0.008333333333333333;
  sub_tet_int_proj_M[1](1, 2) = 0.0015625;
  sub_tet_int_proj_M[1](1, 3) = 0.0015625;
  sub_tet_int_proj_M[1](2, 0) = 0.00026041666666666666;
  sub_tet_int_proj_M[1](2, 1) = 0.0015625;
  sub_tet_int_proj_M[1](2, 2) = 0.0005208333333333333;
  sub_tet_int_proj_M[1](2, 3) = 0.00026041666666666666;
  sub_tet_int_proj_M[1](3, 0) = 0.00026041666666666666;
  sub_tet_int_proj_M[1](3, 1) = 0.0015625;
  sub_tet_int_proj_M[1](3, 2) = 0.00026041666666666666;
  sub_tet_int_proj_M[1](3, 3) = 0.0005208333333333333;
  sub_tet_int_proj_M[2](0, 0) = 0.0005208333333333333;
  sub_tet_int_proj_M[2](0, 1) = 0.00026041666666666666;
  sub_tet_int_proj_M[2](0, 2) = 0.0015625;
  sub_tet_int_proj_M[2](0, 3) = 0.00026041666666666666;
  sub_tet_int_proj_M[2](1, 0) = 0.00026041666666666666;
  sub_tet_int_proj_M[2](1, 1) = 0.0005208333333333333;
  sub_tet_int_proj_M[2](1, 2) = 0.0015625;
  sub_tet_int_proj_M[2](1, 3) = 0.00026041666666666666;
  sub_tet_int_proj_M[2](2, 0) = 0.0015625;
  sub_tet_int_proj_M[2](2, 1) = 0.0015625;
  sub_tet_int_proj_M[2](2, 2) = 0.008333333333333333;
  sub_tet_int_proj_M[2](2, 3) = 0.0015625;
  sub_tet_int_proj_M[2](3, 0) = 0.00026041666666666666;
  sub_tet_int_proj_M[2](3, 1) = 0.00026041666666666666;
  sub_tet_int_proj_M[2](3, 2) = 0.0015625;
  sub_tet_int_proj_M[2](3, 3) = 0.0005208333333333333;
  sub_tet_int_proj_M[3](0, 0) = 0.0005208333333333333;
  sub_tet_int_proj_M[3](0, 1) = 0.00026041666666666666;
  sub_tet_int_proj_M[3](0, 2) = 0.00026041666666666666;
  sub_tet_int_proj_M[3](0, 3) = 0.0015625;
  sub_tet_int_proj_M[3](1, 0) = 0.00026041666666666666;
  sub_tet_int_proj_M[3](1, 1) = 0.0005208333333333333;
  sub_tet_int_proj_M[3](1, 2) = 0.00026041666666666666;
  sub_tet_int_proj_M[3](1, 3) = 0.0015625;
  sub_tet_int_proj_M[3](2, 0) = 0.00026041666666666666;
  sub_tet_int_proj_M[3](2, 1) = 0.00026041666666666666;
  sub_tet_int_proj_M[3](2, 2) = 0.0005208333333333333;
  sub_tet_int_proj_M[3](2, 3) = 0.0015625;
  sub_tet_int_proj_M[3](3, 0) = 0.0015625;
  sub_tet_int_proj_M[3](3, 1) = 0.0015625;
  sub_tet_int_proj_M[3](3, 2) = 0.0015625;
  sub_tet_int_proj_M[3](3, 3) = 0.008333333333333333;
  sub_tet_int_proj_M[4](0, 0) = 0.0004557291666666667;
  sub_tet_int_proj_M[4](0, 1) = 0.0008463541666666667;
  sub_tet_int_proj_M[4](0, 2) = 0.0003255208333333333;
  sub_tet_int_proj_M[4](0, 3) = 0.0003255208333333333;
  sub_tet_int_proj_M[4](1, 0) = 0.0008463541666666667;
  sub_tet_int_proj_M[4](1, 1) = 0.002018229166666667;
  sub_tet_int_proj_M[4](1, 2) = 0.0008463541666666667;
  sub_tet_int_proj_M[4](1, 3) = 0.0008463541666666667;
  sub_tet_int_proj_M[4](2, 0) = 0.0003255208333333333;
  sub_tet_int_proj_M[4](2, 1) = 0.0008463541666666667;
  sub_tet_int_proj_M[4](2, 2) = 0.0004557291666666667;
  sub_tet_int_proj_M[4](2, 3) = 0.0003255208333333333;
  sub_tet_int_proj_M[4](3, 0) = 0.0003255208333333333;
  sub_tet_int_proj_M[4](3, 1) = 0.0008463541666666667;
  sub_tet_int_proj_M[4](3, 2) = 0.0003255208333333333;
  sub_tet_int_proj_M[4](3, 3) = 0.0004557291666666667;
  sub_tet_int_proj_M[5](0, 0) = 0.00006510416666666667;
  sub_tet_int_proj_M[5](0, 1) = 0.0001953125;
  sub_tet_int_proj_M[5](0, 2) = 0.0001953125;
  sub_tet_int_proj_M[5](0, 3) = 0.0001953125;
  sub_tet_int_proj_M[5](1, 0) = 0.0001953125;
  sub_tet_int_proj_M[5](1, 1) = 0.0011067708333333333;
  sub_tet_int_proj_M[5](1, 2) = 0.0009765625;
  sub_tet_int_proj_M[5](1, 3) = 0.0009765625;
  sub_tet_int_proj_M[5](2, 0) = 0.0001953125;
  sub_tet_int_proj_M[5](2, 1) = 0.0009765625;
  sub_tet_int_proj_M[5](2, 2) = 0.0011067708333333333;
  sub_tet_int_proj_M[5](2, 3) = 0.0009765625;
  sub_tet_int_proj_M[5](3, 0) = 0.0001953125;
  sub_tet_int_proj_M[5](3, 1) = 0.0009765625;
  sub_tet_int_proj_M[5](3, 2) = 0.0009765625;
  sub_tet_int_proj_M[5](3, 3) = 0.0011067708333333333;
  sub_tet_int_proj_M[6](0, 0) = 0.0004557291666666667;
  sub_tet_int_proj_M[6](0, 1) = 0.0003255208333333333;
  sub_tet_int_proj_M[6](0, 2) = 0.0003255208333333333;
  sub_tet_int_proj_M[6](0, 3) = 0.0008463541666666667;
  sub_tet_int_proj_M[6](1, 0) = 0.0003255208333333333;
  sub_tet_int_proj_M[6](1, 1) = 0.0004557291666666667;
  sub_tet_int_proj_M[6](1, 2) = 0.0003255208333333333;
  sub_tet_int_proj_M[6](1, 3) = 0.0008463541666666667;
  sub_tet_int_proj_M[6](2, 0) = 0.0003255208333333333;
  sub_tet_int_proj_M[6](2, 1) = 0.0003255208333333333;
  sub_tet_int_proj_M[6](2, 2) = 0.0004557291666666667;
  sub_tet_int_proj_M[6](2, 3) = 0.0008463541666666667;
  sub_tet_int_proj_M[6](3, 0) = 0.0008463541666666667;
  sub_tet_int_proj_M[6](3, 1) = 0.0008463541666666667;
  sub_tet_int_proj_M[6](3, 2) = 0.0008463541666666667;
  sub_tet_int_proj_M[6](3, 3) = 0.002018229166666667;
  sub_tet_int_proj_M[7](0, 0) = 0.0011067708333333333;
  sub_tet_int_proj_M[7](0, 1) = 0.0009765625;
  sub_tet_int_proj_M[7](0, 2) = 0.0001953125;
  sub_tet_int_proj_M[7](0, 3) = 0.0009765625;
  sub_tet_int_proj_M[7](1, 0) = 0.0009765625;
  sub_tet_int_proj_M[7](1, 1) = 0.0011067708333333333;
  sub_tet_int_proj_M[7](1, 2) = 0.0001953125;
  sub_tet_int_proj_M[7](1, 3) = 0.0009765625;
  sub_tet_int_proj_M[7](2, 0) = 0.0001953125;
  sub_tet_int_proj_M[7](2, 1) = 0.0001953125;
  sub_tet_int_proj_M[7](2, 2) = 0.00006510416666666667;
  sub_tet_int_proj_M[7](2, 3) = 0.0001953125;
  sub_tet_int_proj_M[7](3, 0) = 0.0009765625;
  sub_tet_int_proj_M[7](3, 1) = 0.0009765625;
  sub_tet_int_proj_M[7](3, 2) = 0.0001953125;
  sub_tet_int_proj_M[7](3, 3) = 0.0011067708333333333;
  sub_tet_int_proj_M[8](0, 0) = 0.0011067708333333333;
  sub_tet_int_proj_M[8](0, 1) = 0.0009765625;
  sub_tet_int_proj_M[8](0, 2) = 0.0009765625;
  sub_tet_int_proj_M[8](0, 3) = 0.0001953125;
  sub_tet_int_proj_M[8](1, 0) = 0.0009765625;
  sub_tet_int_proj_M[8](1, 1) = 0.0011067708333333333;
  sub_tet_int_proj_M[8](1, 2) = 0.0009765625;
  sub_tet_int_proj_M[8](1, 3) = 0.0001953125;
  sub_tet_int_proj_M[8](2, 0) = 0.0009765625;
  sub_tet_int_proj_M[8](2, 1) = 0.0009765625;
  sub_tet_int_proj_M[8](2, 2) = 0.0011067708333333333;
  sub_tet_int_proj_M[8](2, 3) = 0.0001953125;
  sub_tet_int_proj_M[8](3, 0) = 0.0001953125;
  sub_tet_int_proj_M[8](3, 1) = 0.0001953125;
  sub_tet_int_proj_M[8](3, 2) = 0.0001953125;
  sub_tet_int_proj_M[8](3, 3) = 0.00006510416666666667;
  sub_tet_int_proj_M[9](0, 0) = 0.0004557291666666667;
  sub_tet_int_proj_M[9](0, 1) = 0.0003255208333333333;
  sub_tet_int_proj_M[9](0, 2) = 0.0008463541666666667;
  sub_tet_int_proj_M[9](0, 3) = 0.0003255208333333333;
  sub_tet_int_proj_M[9](1, 0) = 0.0003255208333333333;
  sub_tet_int_proj_M[9](1, 1) = 0.0004557291666666667;
  sub_tet_int_proj_M[9](1, 2) = 0.0008463541666666667;
  sub_tet_int_proj_M[9](1, 3) = 0.0003255208333333333;
  sub_tet_int_proj_M[9](2, 0) = 0.0008463541666666667;
  sub_tet_int_proj_M[9](2, 1) = 0.0008463541666666667;
  sub_tet_int_proj_M[9](2, 2) = 0.002018229166666667;
  sub_tet_int_proj_M[9](2, 3) = 0.0008463541666666667;
  sub_tet_int_proj_M[9](3, 0) = 0.0003255208333333333;
  sub_tet_int_proj_M[9](3, 1) = 0.0003255208333333333;
  sub_tet_int_proj_M[9](3, 2) = 0.0008463541666666667;
  sub_tet_int_proj_M[9](3, 3) = 0.0004557291666666667;
  sub_tet_int_proj_M[10](0, 0) = 0.0011067708333333333;
  sub_tet_int_proj_M[10](0, 1) = 0.0001953125;
  sub_tet_int_proj_M[10](0, 2) = 0.0009765625;
  sub_tet_int_proj_M[10](0, 3) = 0.0009765625;
  sub_tet_int_proj_M[10](1, 0) = 0.0001953125;
  sub_tet_int_proj_M[10](1, 1) = 0.00006510416666666667;
  sub_tet_int_proj_M[10](1, 2) = 0.0001953125;
  sub_tet_int_proj_M[10](1, 3) = 0.0001953125;
  sub_tet_int_proj_M[10](2, 0) = 0.0009765625;
  sub_tet_int_proj_M[10](2, 1) = 0.0001953125;
  sub_tet_int_proj_M[10](2, 2) = 0.0011067708333333333;
  sub_tet_int_proj_M[10](2, 3) = 0.0009765625;
  sub_tet_int_proj_M[10](3, 0) = 0.0009765625;
  sub_tet_int_proj_M[10](3, 1) = 0.0001953125;
  sub_tet_int_proj_M[10](3, 2) = 0.0009765625;
  sub_tet_int_proj_M[10](3, 3) = 0.0011067708333333333;
  sub_tet_int_proj_M[11](0, 0) = 0.002018229166666667;
  sub_tet_int_proj_M[11](0, 1) = 0.0008463541666666667;
  sub_tet_int_proj_M[11](0, 2) = 0.0008463541666666667;
  sub_tet_int_proj_M[11](0, 3) = 0.0008463541666666667;
  sub_tet_int_proj_M[11](1, 0) = 0.0008463541666666667;
  sub_tet_int_proj_M[11](1, 1) = 0.0004557291666666667;
  sub_tet_int_proj_M[11](1, 2) = 0.0003255208333333333;
  sub_tet_int_proj_M[11](1, 3) = 0.0003255208333333333;
  sub_tet_int_proj_M[11](2, 0) = 0.0008463541666666667;
  sub_tet_int_proj_M[11](2, 1) = 0.0003255208333333333;
  sub_tet_int_proj_M[11](2, 2) = 0.0004557291666666667;
  sub_tet_int_proj_M[11](2, 3) = 0.0003255208333333333;
  sub_tet_int_proj_M[11](3, 0) = 0.0008463541666666667;
  sub_tet_int_proj_M[11](3, 1) = 0.0003255208333333333;
  sub_tet_int_proj_M[11](3, 2) = 0.0003255208333333333;
  sub_tet_int_proj_M[11](3, 3) = 0.0004557291666666667;
  return sub_tet_int_proj_M;
}

inline subtet_int_t get_subtet_int() noexcept {
  subtet_int_t subtet_int;
  subtet_int[0][0] = 0.013020833333333334;
  subtet_int[0][1] = 0.0026041666666666665;
  subtet_int[0][2] = 0.0026041666666666665;
  subtet_int[0][3] = 0.0026041666666666665;
  subtet_int[1][0] = 0.0026041666666666665;
  subtet_int[1][1] = 0.013020833333333334;
  subtet_int[1][2] = 0.0026041666666666665;
  subtet_int[1][3] = 0.0026041666666666665;
  subtet_int[2][0] = 0.0026041666666666665;
  subtet_int[2][1] = 0.0026041666666666665;
  subtet_int[2][2] = 0.013020833333333334;
  subtet_int[2][3] = 0.0026041666666666665;
  subtet_int[3][0] = 0.0026041666666666665;
  subtet_int[3][1] = 0.0026041666666666665;
  subtet_int[3][2] = 0.0026041666666666665;
  subtet_int[3][3] = 0.013020833333333334;
  subtet_int[4][0] = 0.001953125;
  subtet_int[4][1] = 0.004557291666666667;
  subtet_int[4][2] = 0.001953125;
  subtet_int[4][3] = 0.001953125;
  subtet_int[5][0] = 0.0006510416666666666;
  subtet_int[5][1] = 0.0032552083333333335;
  subtet_int[5][2] = 0.0032552083333333335;
  subtet_int[5][3] = 0.0032552083333333335;
  subtet_int[6][0] = 0.001953125;
  subtet_int[6][1] = 0.001953125;
  subtet_int[6][2] = 0.001953125;
  subtet_int[6][3] = 0.004557291666666667;
  subtet_int[7][0] = 0.0032552083333333335;
  subtet_int[7][1] = 0.0032552083333333335;
  subtet_int[7][2] = 0.0006510416666666666;
  subtet_int[7][3] = 0.0032552083333333335;
  subtet_int[8][0] = 0.0032552083333333335;
  subtet_int[8][1] = 0.0032552083333333335;
  subtet_int[8][2] = 0.0032552083333333335;
  subtet_int[8][3] = 0.0006510416666666666;
  subtet_int[9][0] = 0.001953125;
  subtet_int[9][1] = 0.001953125;
  subtet_int[9][2] = 0.004557291666666667;
  subtet_int[9][3] = 0.001953125;
  subtet_int[10][0] = 0.0032552083333333335;
  subtet_int[10][1] = 0.0006510416666666666;
  subtet_int[10][2] = 0.0032552083333333335;
  subtet_int[10][3] = 0.0032552083333333335;
  subtet_int[11][0] = 0.004557291666666667;
  subtet_int[11][1] = 0.001953125;
  subtet_int[11][2] = 0.001953125;
  subtet_int[11][3] = 0.001953125;
  return subtet_int;
}

constexpr inline matrix4x4 get_parent_M_inv() noexcept {
  return matrix4x4(
      96.0,-24.0,-24.0,-24.0,
     -24.0, 96.0,-24.0,-24.0,
     -24.0,-24.0, 96.0,-24.0,
     -24.0,-24.0,-24.0, 96.0);
}

inline O_t get_O(array<vector3<double>, 4> const x, S_t const S) noexcept {
  O_t O;
  for (int tet = 0; tet < 12; ++tet) {
    O[tet] = matrix3x3<double>::zero();
  }
  for (int tet = 0; tet < 12; ++tet) {
    for (int node = 0; node < 10; ++node) {
      for (int dim1 = 0; dim1 < 3; ++dim1) {
        for (int dim2 = 0; dim2 < 3; ++dim2) {
          O[tet](dim1, dim2) += x[node](dim1) * S[tet](node, dim2);
        }
      }
    }
  }
  return O;
}

inline O_t get_O_inv(O_t const O) noexcept {
  OType O_inv;
  for (int tet = 0; tet < 12; ++tet) {
    O_inv[tet] = inverse(O[tet]);
  }
  return O_inv;
}

inline array<double, 12> get_O_det(O_t const O) noexcept {
  array<double, 12> det_O;
  for (int tet = 0; tet < 12; ++tet) {
    det_O[tet] = determinant(O[tet]);
  }
  return det_O;
}

inline matrix4x4 get_M_inv_from_O_det(array<double, 12> const O_det) noexcept {
  auto M = matrix4x4::zero();
  auto const sub_tet_int_proj_M = get_subtet_proj_M();
  for (int tet = 0; tet < 12; ++tet) {
    for (int i = 0; i < 4; ++i) {
      for (int j = 0; j < 4; ++j) {
        M(i, j) += O_det[tet] * sub_tet_int_proj_M[tet](i, j);
      }
    }
  }
  return inverse(M);
}

inline SOL_t get_SOL(array<double, 12> O_det, O_t O_inv,
    subtet_int_t subtet_int, S_t S) noexcept {
  SOL_t SOL;
  for (auto& a : SOL)
  for (auto& b : SOL)
    b = vector3<double>::zero();
  for (int tet = 0; tet < 12; ++tet) {
    for (int node = 0; node < 10; ++node) {
      for (int dim1 = 0; dim1 < 3; ++dim1) {
        for (int dim2 = 0; dim2 < 3; ++dim2) {
          for (int pt = 0; pt < 4; ++pt) {
            SOL[pt][node](dim1) += O_det[tet] * S[tet][node](dim2) *
                                   O_inv[tet](dim2, dim1) *
                                   subtet_int[tet][pt];
          }
        }
      }
    }
  }
  return SOL;
}

inline array<double, 4> get_DOL(
    array<double, 12> O_det, subtet_int_t subtet_int) noexcept {
  array<double, 4> DOL;
  for (auto& a : DOL) a = 0.0;
  for (int tet = 0; tet < nsub_tets; ++tet) {
    for (int pt = 0; pt < nbarycentric_coords; ++pt) {
      DOL[pt] += O_det[tet] * sub_tet_int[tet][pt];
    }
  }
  return DOL;
}

inline array<vector3<double>, 4> get_ref_points() noexcept {
  array<vector3<double, 4> pts;
  pts[0](0) = 0.1381966011250105151795413165634361882280;
  pts[0](1) = 0.1381966011250105151795413165634361882280;
  pts[0](2) = 0.1381966011250105151795413165634361882280;
  pts[1](0) = 0.5854101966249684544613760503096914353161;
  pts[1](1) = 0.1381966011250105151795413165634361882280;
  pts[1](2) = 0.1381966011250105151795413165634361882280;
  pts[2](0) = 0.1381966011250105151795413165634361882280;
  pts[2](1) = 0.5854101966249684544613760503096914353161;
  pts[2](2) = 0.1381966011250105151795413165634361882280;
  pts[3](0) = 0.1381966011250105151795413165634361882280;
  pts[3](1) = 0.1381966011250105151795413165634361882280;
  pts[3](2) = 0.5854101966249684544613760503096914353161;
  return pts;
}

inline array<double, 4> get_barycentric(vector3<double> const x) noexcept {
  array<double, 4> xi;
  xi[0] = 1.0 - x[0] - x[1] - x[2];
  xi[1] = x[0];
  xi[2] = x[1];
  xi[3] = x[2];
  return xi;
}

inline matrix4x4<double> get_M_inv(array<vector3<double>, 10> node_coords) noexcept {
  return get_M_inv_from_O_det(get_O_det(get_O(node_coords, get_S())));
}

inline array<vector3<double>, 4> get_subtet_coords(array<vector3<double>, 11> in, int subtet) noexcept {
  array<vector3<double>, 4> out;
  switch (subtet) {
    case 0:
      out[0] = in[0];
      out[1] = in[4];
      out[2] = in[6];
      out[3] = in[7];
      break;
    case 1:
      out[0] = in[1];
      out[1] = in[5];
      out[2] = in[4];
      out[3] = in[8];
      break;
    case 2:
      out[0] = in[2];
      out[1] = in[6];
      out[2] = in[5];
      out[3] = in[9];
      break;
    case 3:
      out[0] = in[3];
      out[1] = in[8];
      out[2] = in[7];
      out[3] = in[9];
      break;
    case 4:
      out[0] = in[4];
      out[1] = in[8];
      out[2] = in[5];
      out[3] = in[10];
      break;
    case 5:
      out[0] = in[5];
      out[1] = in[8];
      out[2] = in[9];
      out[3] = in[10];
      break;
    case 6:
      out[0] = in[9];
      out[1] = in[8];
      out[2] = in[7];
      out[3] = in[10];
      break;
    case 7:
      out[0] = in[7];
      out[1] = in[8];
      out[2] = in[4];
      out[3] = in[10];
      break;
    case 8:
      out[0] = in[4];
      out[1] = in[5];
      out[2] = in[6];
      out[3] = in[10];
      break;
    case 9:
      out[0] = in[5];
      out[1] = in[9];
      out[2] = in[6];
      out[3] = in[10];
      break;
    case 10:
      out[0] = in[9];
      out[1] = in[7];
      out[2] = in[6];
      out[3] = in[10];
      break;
    case 11:
      out[0] = in[7];
      out[1] = in[4];
      out[2] = in[6];
      out[3] = in[10];
      break;
  }
  return out;
}

inline double get_tet_diameter(array<vector3<double>, 4> const x) noexcept {
  auto const e10 = x[1] - x[0];
  auto const e20 = x[2] - x[0];
  auto const e30 = x[3] - x[0];
  auto const e21 = x[2] - x[1];
  auto const e31 = x[3] - x[1];
  auto const vol = e30 * cross(e10, e20);
  auto const a0 = norm(cross(e10, e20));
  auto const a1 = norm(cross(e10, e30));
  auto const a2 = norm(cross(e20, e30));
  auto const a3 = norm(cross(e21, e31));
  auto const sa = 0.5 * (a0 + a1 + a2 + a3);
  return (sa > 0.0) ? (vol / sa) : 0.0;
}

inline double get_char_length(array<vector3<double>, 10> in) noexcept {
  array<vector3<double>, 11> node_coords_with_center;
  for (int i = 0; i < 10; ++i) node_coords_with_center[i] = in[i];
  node_coords_with_center[10] = (in[4] + in[5] + in[6] + in[7] + in[8] + in[9]) / 6.0;
  double min_length = std::numeric_limits<double>::max();
  for (int tet = 0; tet < 12; ++tet) {
    auto const x = get_subtet_coords(node_coords_with_center, tet);
    auto const length = get_tet_diameter(x);
    min_length = lgr::min(min_length, length);
  }
  return min_length;
}

inline array<vector3<double>, 12> get_centroids() noexcept {
  array<vector3<double>, 12> xi;
  xi[0] = vector3<double>( 0.125, 0.125, 0.125 );
  xi[1] = vector3<double>( 0.625, 0.125, 0.125 );
  xi[2] = vector3<double>( 0.125, 0.625, 0.125 );
  xi[3] = vector3<double>( 0.125, 0.125, 0.625 );
  xi[4] = vector3<double>( 0.4375, 0.1875, 0.1875 );
  xi[5] = vector3<double>( 0.3125, 0.3125, 0.3125 );
  xi[6] = vector3<double>( 0.1875, 0.1875, 0.4375 );
  xi[7] = vector3<double>( 0.3125, 0.0625, 0.3125 );
  xi[8] = vector3<double>( 0.3125, 0.3125, 0.0625 );
  xi[9] = vector3<double>( 0.1875, 0.4375, 0.1875 );
  xi[10] = vector3<double>( 0.0625, 0.3125, 0.3125 );
  xi[11] = vector3<double>( 0.1875, 0.1875, 0.1875 );
  return xi;
}

inline double get_q(double const x) noexcept {
  return 0.25 * (1.0 - std::sqrt(5.0) + 4.0 * std::sqrt(5.0) * x);
}

inline vector4<double> get_Q(vector3<double> const xi) noexcept {
  return vector4<double>(
    get_q(1.0 - xi[0] - xi[1] - xi[2]),
    get_q(xi[0]),
    get_q(xi[1]),
    get_q(xi[2]));
}

inline array<array<double, 10>, 10> get_consistent_mass_matrix(
    array<vector3<double>, 10> const node_coords,
    vector4<double> point_densities) noexcept {
  auto const S = get_S();
  auto const O = get_O(node_coords, S);
  auto const O_det = get_O_det(O);
  auto const C = get_centroids();
  auto const gamma = get_gamma();
  array<array<double, 10>, 10> mass;
  for (int i = 0; i < 10; ++i) {
    for (int j = 0; j < 10; ++j) {
      mass[i][j] = 0.0;
    }
  }
  for (int tet = 0; tet < nsub_tets; ++tet) {
    auto const c_s = C[tet];
    auto const Q_s = get_Q(c_s);
    auto const rho_s = Q_s * point_densities;
    auto const J_s = O_det[tet];
    auto const gamma_s = gamma[tet];
    for (int i = 0; i < 10; ++i) {
      for (int j = 0; j < 10; ++j) {
        mass[i][j] += (J_s * rho_s) * gamma_s[i][j];
      }
    }
  }
  return mass;
}

inline array<double, 10> lump_mass_matrix(array<array<double, 10>, 10> const mass) noexcept {
  array<double, 10> lumped;
  for (int i = 0; i < nodes; ++i) {
    lumped[i] = 0.0;
    for (int j = 0; j < nodes; ++j) {
      lumped[i] += mass[i][j];
    }
  }
  return lumped;
}

inline array<array<vector3<double>, 4>, 4> get_basis_gradients(
    array<vector3<double>, 10> const node_coords) noexcept
{
  array<array<vector3<double>, 4>, 4> grad_N;
  for (auto& a : grad_N) {
    for (auto& b : a) {
      b = vector3<double>::zero();
    }
  }
  auto const ref_points = get_ref_points();
  auto const sub_tet_int = compute_sub_tet_int();
  auto const S = compute_S();
  auto const O = compute_O(node_coords, S);
  auto const O_inv = compute_O_inv(O);
  auto const O_det = compute_O_det(O);
  auto const M_inv = compute_M_inv(O_det);
  auto const SOL = compute_SOL(O_det, O_inv, sub_tet_int, S);
  for (int node = 0; node < 10; ++node) {
    for (int pt = 0; pt < 4; ++pt) {
      auto const lambda = get_barycentric(ref_points[pt]);
      for (int d = 0; d < 3; ++d) {
        for (int l1 = 0; l1 < 4; ++l1) {
          for (int l2 = 0; l2 < 4; ++l2) {
            grad_N[pt][node](d) +=
                lambda[l1] * M_inv(l1, l2) * SOL[l2][node](d);
          }
        }
      }
    }
  }
  return grad_N;
}

inline array<double, 4> get_volumes(
    array<vector3<double>, 10> const node_coords) noexcept
{
  // compute the projected |J| times integration weights
  constexpr double ip_weight = 1.0 / 24.0;
  array<double, 4> volumes;
  for (auto& a : volumes) a = 0.0;
  auto const ref_points = get_ref_points();
  auto const sub_tet_int = compute_sub_tet_int();
  auto const S = compute_S();
  auto const O = compute_O(node_coords, S);
  auto const O_det = compute_O_det(O);
  auto const DOL = compute_DOL(O_det, sub_tet_int);
  for (int pt = 0; pt < 4; ++pt) {
    auto const lambda = get_barycentric_coord(ref_points[pt]);
    for (int l1 = 0; l1 < 4; ++l1) {
      for (int l2 = 0; l2 < 4; ++l2) {
        volumes[pt] +=
          lambda[l1] * parent_M_inv(l1, l2) * DOL[l2];
      }
    }
    volumes[pt] *= ip_weight;
  }
}

}
